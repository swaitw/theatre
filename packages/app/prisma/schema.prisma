// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./client-generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  libSessions   LibSession[]
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  guestAccesses GuestAccess[]
  teams         TeamMember[]

  @@index([email], name: "email")
}

model Team {
  id         String       @id @default(cuid())
  name       String
  workspaces Workspace[]
  members    TeamMember[]
  createdAt  DateTime     @default(now())
}

enum TeamUserRole {
  OWNER
  MEMBER
}

model TeamMember {
  teamId   String
  userId   String
  team     Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user     User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userRole TeamUserRole
  accepted Boolean      @default(false)

  @@id([userId, teamId])
  @@index([teamId])
  @@index([userId])
}

model Workspace {
  id          String        @id @default(cuid())
  name        String
  description String
  teamId      String
  team        Team          @relation(fields: [teamId], references: [id], onDelete: Cascade)
  guests      GuestAccess[]
  createdAt   DateTime      @default(now())
}

enum AccessLevel {
  READ
  READ_WRITE
}

model GuestAccess {
  workspaceId String
  userId      String
  accessLevel AccessLevel
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  accepted    Boolean     @default(false)

  @@id([userId, workspaceId])
  @@index([workspaceId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// We're using OAuth2's device authorization flow to authorize `@theatre/studio` hosted in random origins.
model DeviceAuthorizationFlow {
  deviceCode          String                       @id // a random token generated by the server, and shared with the libray. This token is the key the library will use to obtain the final access/refersh tokens
  userCode            String                       @unique // a random, short token generated by the server. The user will then be redirected to [app]/auth/?userCode=[userCode]. At that URL, the user can log in via credentials, or if they're already logged in, they'll be asked whether to grant the library permission to edit projects
  createdAt           DateTime                     @db.Timestamptz() // the time the flow started. If older than a certain interval, the flow is considered expired/
  lastCheckTime       DateTime                     @db.Timestamptz() // the time the client last checked the status of this flow. If shorter than a certain interval, the client will be told to slow down.
  nounce              String // a random token generated by the client. It'll be included in the final idToken, so the client can make sure the tokens belong to the authentication flow it initiated
  codeChallenge       String                       @default("") // code_challenge as per https://tools.ietf.org/html/rfc7636
  codeChallengeMethod String                       @default("S256") // code_challenge_method as per https://tools.ietf.org/html/rfc7636 (currently only "S256" is supported)
  state               DeviceAuthorizationFlowState @default(initialized)
  tokens              String // will be non-empty if state=1. It'll contain a json object containing access/refresh tokens
  scopes              Json                         @default("[]")
}

enum DeviceAuthorizationFlowState {
  initialized
  userAllowedAuth
  userDeniedAuth
  tokenAlreadyUsed
}

model LibSession {
  refreshToken            String    @id
  createdAt               DateTime  @db.Timestamptz()
  validUntil              DateTime  @db.Timestamptz()
  userId                  String
  user                    User      @relation(fields: [userId], references: [id])
  succeededByRefreshToken String? // if this session was refreshed, this will contain the refresh token of the new session
  successorLinkExpresAt   DateTime? @db.Timestamptz() // the time at which the link to the successor will expire. This is supposed to give a minute of leeway for the client to access the new refresh token in case it didn't receive it in the first try
}
